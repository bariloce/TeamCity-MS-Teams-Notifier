<project name="lights-notifier" default="compile" basedir=".">
	
	<description>
      TeamCity notifier plugin to send messages to a Microsoft Teams channel.
    </description>

	<property environment="env"/>
	<property name="src" location="src"/>
	<property name="classes" location="classes"/>
	<property name="resources" location="src/resources"/>
	<property name="build" location="build"/>
	<property name="reports" location="reports"/>
	<property name="main-class" value="MSTeamsNotifier"/>
	<!-- Default to 0.0.0.0 if no version specified -->
	<condition property="version" value="${env.BUILD_NUMBER}" else="1.0.6">
		<and>
			<isset property="env.BUILD_NUMBER"/>
			<not>
				<matches string="${env.BUILD_NUMBER}" pattern="^$"/>
			</not>
		</and>
	</condition>
	<!-- Default to a final tag if no tag type specified -->
	<condition property="tag-type" value="${env.EXECUTE_TAGGING_TYPE}" else="final">
		<and>
			<isset property="env.EXECUTE_TAGGING_TYPE"/>
			<not>
				<matches string="${env.EXECUTE_TAGGING_TYPE}" pattern="^$"/>
			</not>
		</and>
	</condition>
	<property name="vendor" value="Marek Barilla"/>
	<!-- Determines whether to include a version etc. in the JAR's filename -->
	<condition property="jar" value="${main-class}-${version}-${tag-type}" else="${main-class}">
		<matches string="${env.MUST_VERSION_ARTIFACTS}" pattern="^-?true|yes|1$" casesensitive="false"/>
	</condition>
	<property name="lib" value="lib"/>
	<property name="junit.home" value="lib/junit"/>
	<property name="manifest" value="MANIFEST.MF"/>
	<property name="plugin.xml" value="teamcity-plugin.xml"/>
	<property name="plugin-bean.xml" value="build-server-plugin-msTeams-notifier.xml"/>
	<property name="versiontag" value="&lt;version&gt;${version}&lt;/version&gt;"/>
	<property name="coverage.dir" value="coverage" />
	<property name="testng.dir" value="testng" />
	
	<path id="classpath">
		<fileset dir="${lib}">			
			<include name="**/*.jar"/>
		</fileset>
		<pathelement location="${classes}"/>
	</path>

	<manifestclasspath property="manifest.classpath" jarfile="${jar}.jar" maxParentLevels="7">
		<classpath refid="classpath" />
	</manifestclasspath>
	
	<path id="emma.lib">
	    <pathelement location="${lib}/test/emma-2.1.5320/emma.jar" />
	    <pathelement location="${lib}/test/emma-2.1.5320/emma_ant.jar" />
	</path>
	
	<taskdef resource="emma_ant.properties" classpathref="emma.lib" />

	<taskdef name="testng" classname="org.testng.TestNGAntTask">
		<classpath refid="classpath" />
	</taskdef>
	
	<target name="init">
		<echo>
	      Source:         ${src}
	      Classes:        ${classes}
          Classpath:      ${manifest.classpath}
	      Resources:      ${resources}
	      Build:          ${build}
	      Reports:        ${reports}
          Coverage:       ${coverage.dir}
	      Main Class:     ${main-class}
	      Version:        ${version}
          Version Tag:    ${versiontag}
	      Vendor:         ${vendor}
	      Tag Type:       ${tag-type}
	      Jar Name        ${jar}
	      Library path:   ${lib}
	      JUnit Home:     ${junit.home}
          TeamCity Home:  ${teamcity.home}
          TeamCity App:   ${teamcity.appdir}
	    </echo>
	</target>

	<target name="compile" depends="init" description="Compile the source code" >
		<mkdir dir="${classes}"/>
		<javac srcdir="${src}" destdir="${classes}" classpathref="classpath" includeAntRuntime="false" debug="on"/>
		<!-- Create manifest on disk to make it easy to view during development -->
		<!-- Help: http://java.sun.com/developer/Books/javaprogramming/JAR/basics/manifest.html -->
		<!--       http://docs.oracle.com/javase/1.4.2/docs/guide/versioning/spec/versioning2.html -->
		<manifest file="${manifest}">
			<attribute name="Built-By" value="${user.name}" />
			<attribute name="Main-Class" value="${main-class}" />
			<attribute name="Class-Path" value="${manifest.classpath}"/>
			<attribute name="Specification-Title" value="${main-class}" />
			<attribute name="Specification-Version" value="${version}" />
			<attribute name="Specification-Vendor" value="${vendor}" />
			<attribute name="Implementation-Title" value="${main-class}" />
			<attribute name="Implementation-Version" value="${version}" />
			<attribute name="Implementation-Vendor" value="${vendor}" />
		</manifest>
	</target>

	<!-- http://stackoverflow.com/questions/52984/how-do-i-generate-emma-code-coverage-reports-using-ant -->
	<target name="emma" description="turns on EMMA's on-the-fly instrumentation mode" >
	    <property name="emma.enabled" value="true" />
		<property name="emma.filter" value="-com.foxgang.teamcity.msTeams.test.*"/>
    </target>
	
	<target name="test" depends="emma,compile" description="Run tests">
		<mkdir dir="${coverage.dir}"/>
		<emma enabled="${emma.enabled}" verbosity="verbose">
			<instr instrpath="${classes}" mode="overwrite" metadatafile="${coverage.dir}/metadata.emma">
				<filter value="${emma.filter}"/>
			</instr>
		</emma>
		<testng failureProperty="tests.failed" outputdir="${testng.dir}" haltonfailure="true" >
			<classpath refid="classpath">
			</classpath>
			<xmlfileset dir="." includes="testng.xml"/>
			<jvmarg value="-noverify"/>
			<jvmarg value="-Demma.coverage.out.file=${coverage.dir}/coverage.emma"/>
			<jvmarg value="-Demma.coverage.out.merge=false"/>
		</testng>
		<emma enabled="${emma.enabled}">
			<report sourcepath="src" sort="+block,+name,+method,+class,+line" metrics="method:100,block:100,line:100,class:100,line:100">
				<fileset dir="${coverage.dir}">
					<include name="*.emma"/>
				</fileset>
				<txt outfile="${coverage.dir}/coverage.txt" depth="package" columns="class,method,block,line,name"/>
				<xml outfile="${coverage.dir}/coverage.xml" depth="package"/>
				<html outfile="${coverage.dir}/coverage.html" depth="method" columns="name,class,method,block,line"/>
				</report>
		</emma>		
	</target>

	<target name="release" depends="compile" description="Generate the distribution" >
		<replaceregexp file="teamcity-plugin.xml" match="&lt;version&gt;.*?&lt;/version&gt;" replace="${versiontag}" />
		<mkdir dir="${build}/server"/>
		<copy file="${plugin.xml}" todir="${build}"/>
		<jar jarfile="${build}/server/${jar}.jar" manifest="${manifest}" basedir="${build}">
			<metainf dir="${src}/META-INF"/>
			<fileset dir="${classes}" excludes="**/test/**"/>
			<fileset dir="${resources}"/>
		</jar>
		<mkdir dir="${build}/server/${lib}"/>
		<copy todir="${build}/server/${lib}">
		    <fileset dir="${lib}" includes="**">
		    	<exclude name="test/**"/>
		    	<exclude name="Teamcity/**"/>
		    	<exclude name="log4J-1.2.17/**"/>
			</fileset>
		</copy>
		<zip basedir="${build}" destfile="${jar}.zip" includes="server/${jar}.jar,${plugin.xml},server/${lib}/**"/>
		<move file="${jar}.zip" todir="${build}"/>
		<delete dir="${build}/server"/>
		<delete file="${build}/${plugin.xml}"/>
	</target>

	<target name="run" depends="release">
		<java jar="${build}/${jar}.jar" fork="true" />
	</target>

	<target name="clean" description="Clean up">
		<delete dir="${classes}"/>
		<delete dir="${build}"/>
		<delete dir="${reports}"/>
		<delete dir="${coverage.dir}"/>
		<delete dir="${testng.dir}"/>
		<delete file="${manifest}"/>
	</target>

</project>
